// Existing models...

model Session {
  id          String      @id @default(uuid())
  userId      String
  token       String      @unique
  userAgent   String?
  ipAddress   String?
  expiresAt   DateTime
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  user        User        @relation(fields: [userId], references: [id])
}

model TokenBlacklist {
  id          String      @id @default(uuid())
  token       String      @unique
  reason      String?
  createdAt   DateTime    @default(now())
}

model SecurityLog {
  id          String      @id @default(uuid())
  userId      String?
  eventType   String      // LOGIN_ATTEMPT, PASSWORD_CHANGE, etc.
  status      String      // SUCCESS, FAILURE
  ipAddress   String?
  userAgent   String?
  details     Json?
  createdAt   DateTime    @default(now())
  
  user        User?       @relation(fields: [userId], references: [id])
}

model SecuritySettings {
  id                      String    @id @default(uuid())
  userId                  String    @unique
  twoFactorEnabled       Boolean   @default(false)
  twoFactorSecret       String?
  loginNotifications     Boolean   @default(true)
  ipWhitelist           String[]
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  
  user                  User       @relation(fields: [userId], references: [id])
}

// Update User model
model User {
  // Existing fields...
  
  sessions              Session[]
  securityLogs         SecurityLog[]
  securitySettings     SecuritySettings?
}