// prisma/schema.prisma
// This is your Prisma schema file
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                 String            @id @default(uuid())
  email              String            @unique
  password           String
  userType           String            // 'entrepreneur' or 'funder'
  subscriptionTier   String            // Basic, Chrome, Bronze, Silver, Gold, Platinum
  verificationLevel  String            // None, BusinessPlan, UseCase, etc.
  securityStatus     String            @default("ACTIVE") // ACTIVE, LOCKED, SUSPENDED
  lastSecurityIncident DateTime?
  emailVerified      Boolean           @default(false)
  phoneVerified      Boolean           @default(false)
  verificationToken  String?
  resetPasswordToken String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  stripeCustomerId   String?
  stripeConnectId    String?           // For handling direct payments

  // Relations
  entrepreneurProfile EntrepreneurProfile?
  funderProfile      FunderProfile?
  matches            Match[]           @relation("UserMatches")
  matchedWith        Match[]           @relation("MatchedWithUsers")
  messages           Message[]
  verificationRequests VerificationRequest[]
  profileBoosts      ProfileBoost[]
  accessLogs         AccessLog[]
  profileViews       ProfileView[]     @relation("ViewedProfiles")
  viewedBy           ProfileView[]     @relation("Viewers")
  preferredTeamSize        Int?
  preferredSkills         Json[]      // Array of desired skills
  preferredMarketSize     String?
  preferredTimeline       String?
  preferredStages         String[]    // Array of funding stages of interest
  preferredBusinessTypes  String[]    // Array of B2B, B2C, etc.
  investmentHistory       InvestmentHistory[]
  successMetrics         SuccessMetric[]
  focusIndustries        IndustryFocus[]
  
  // Image Relations
  images             Image[]
  
  // Match & Communication Relations
  matches            Match[]           @relation("UserMatches")
  matchedWith        Match[]           @relation("MatchedWithUsers")
  sentMessages       Message[]         @relation("SentMessages")
  receivedMessages   Message[]         @relation("ReceivedMessages")
  
  // Subscription & Notification Relations
  subscriptions      Subscription[]
  notifications      Notification[]
  
  // Review Relations
  reviewsGiven       Review[]          @relation("ReviewsGiven")
  reviewsReceived    Review[]          @relation("ReviewsReceived")
  flags              Flag[]
  
  // Escrow Relations
  entrepreneurEscrows EscrowAccount[]  @relation("EntrepreneurEscrows")
  funderEscrows      EscrowAccount[]   @relation("FunderEscrows")
  
  // Location Relation
  location           UserLocation?

  // Security Relations
  sessions           Session[]
  securityLogs       SecurityLog[]
  securitySettings   SecuritySettings?

  // Error Logging Relations
  errorLogs          ErrorLog[]
  resolvedAlerts     ErrorAlert[]      @relation("ErrorAlertResolver")

  // Document Relations
  createdVersions     DocumentVersion[]  // Versions created by this user
}

// Security Models
model Session {
  id          String      @id @default(uuid())
  userId      String
  token       String      @unique
  userAgent   String?
  ipAddress   String?
  expiresAt   DateTime
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  user        User        @relation(fields: [userId], references: [id])
}

model TokenBlacklist {
  id          String      @id @default(uuid())
  token       String      @unique
  reason      String?
  createdAt   DateTime    @default(now())
}

model SecurityLog {
  id          String      @id @default(uuid())
  userId      String
  eventType   String      // LOGIN_ATTEMPT, PASSWORD_CHANGE, etc.
  status      String      // SUCCESS, FAILURE
  ipAddress   String?
  userAgent   String?
  details     Json?
  createdAt   DateTime    @default(now())
  
  user        User        @relation(fields: [userId], references: [id])
}

model SecuritySettings {
  id                      String    @id @default(uuid())
  userId                  String    @unique
  twoFactorEnabled       Boolean   @default(false)
  twoFactorSecret       String?
  loginNotifications     Boolean   @default(true)
  ipWhitelist           String[]
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  
  user                  User       @relation(fields: [userId], references: [id])

  masterKeyId  String?   // Reference to encrypted master key in KMS/S3
}

// Key deletion schedule
model KeyDeletionSchedule {
  id                String    @id @default(uuid())
  keyId             String    @unique
  scheduledDeletion DateTime
  executed          Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Image {
  id        String   @id @default(uuid())
  userId    String
  purpose   String   // profile, document, logo
  filename  String
  format    String   // jpeg, png, webp
  width     Int
  height    Int
  size      Int      // in bytes
  url       String
  metadata  Json?    // Additional image metadata
  variants  ImageVariant[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([purpose])
}

model ImageVariant {
  id        String   @id @default(uuid())
  imageId   String
  purpose   String   // thumbnail, medium, large
  filename  String
  format    String
  width     Int
  height    Int
  size      Int
  url       String
  createdAt DateTime @default(now())

  image     Image    @relation(fields: [imageId], references: [id], onDelete: Cascade)

  @@index([imageId])
}

model EntrepreneurProfile {
  id                  String   @id @default(uuid())
  userId              String   @unique
  projectName         String
  logo                String?
  photo               String?
  dbaNumber          String?
  taxId              String?
  companyWebsite     String?
  linkedinUrl        String?
  features           String[]
  industries         String[]
  yearsExperience    Int
  businessType       String    // B2B or B2C
  desiredInvestment  Json     // { amount: number, timeframe: string }
  profitabilityTimeframe String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  teamSize          Int?
  skills            Json[]            // Array of {name: string, category: string, level: number}
  targetMarketSize  String?
  timeline          String?
  fundingStage     String?
  pitchDeck        String?           // URL to pitch deck
  projectTimeline   Json?             // Detailed timeline/milestones
  competitors       String[]
  patentStatus     String?
  teamMembers      TeamMember[]
  successMetrics   SuccessMetric[]

  user User @relation(fields: [userId], references: [id])
}

model FunderProfile {
  id                  String   @id @default(uuid())
  userId              String   @unique
  name                String
  logo                String?
  photo               String?
  taxId               String?
  companyWebsite      String?
  linkedinUrl         String?
  availableFunds      Float
  areasOfInterest     String[]
  yearsExperience     Int
  investmentPreferences Json    // { timeframe: string, commitmentLength: string }
  certifications      String[]
  createdAt           DateTime @default(now())
  updatedAt           DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model Match {
  id                 String   @id @default(uuid())
  userId             String
  matchedWithId      String
  status             String   // pending, accepted, rejected
  compatibility      Float
  compatibilityFactors Json?   // Stores detailed matching factors
  fraudRiskScore     Float?
  matchQuality       String?  // HIGH, MEDIUM, LOW
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now())

  user               User     @relation("UserMatches", fields: [userId], references: [id])
  matchedWith        User     @relation("MatchedWithUsers", fields: [matchedWithId], references: [id])
  messages           Message[]

  initialScore    Float
  finalScore      Float
  matchReasons    String[]
  commonIndustries String[]
  status          String      // pending, accepted, rejected, expired
  statusHistory   MatchStatus[]
  feedback        MatchFeedback?
}

model Message {
  id             String   @id @default(uuid())
  matchId        String
  senderId       String
  receiverId     String
  content        String
  read           Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())

  match     Match    @relation(fields: [matchId], references: [id])
  sender    User     @relation("SentMessages", fields: [senderId], references: [id])
  receiver  User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
}

model Subscription {
  id              String   @id @default(uuid())
  userId          String
  tier            String
  status          String   // active, canceled, past_due
  stripeId        String?
  currentPeriodEnd DateTime
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  type      String   // match, message, system
  content   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model Review {
  id            String      @id @default(uuid())
  reviewerId    String      // Who wrote the review
  reviewedId    String      // Who is being reviewed
  rating        Int         @db.SmallInt
  categories    Json        // Stores ratings for different categories {professionalism: 5, communication: 4, etc}
  content       String?     @db.Text
  status        String      // PENDING, PUBLISHED, FLAGGED, REMOVED
  flags         Flag[]      // Related flags
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now())
  
  // Relations
  reviewer      User        @relation("ReviewsGiven", fields: [reviewerId], references: [id])
  reviewed      User        @relation("ReviewsReceived", fields: [reviewedId], references: [id])

  // Add encryption for sensitive content
  encryption    ReviewEncryption?
}

model Flag {
  id            String      @id @default(uuid())
  reviewId      String
  reporterId    String
  reason        String
  status        String      // PENDING, REVIEWED, DISMISSED
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now())

  // Relations
  review        Review      @relation(fields: [reviewId], references: [id])
  reporter      User        @relation(fields: [reporterId], references: [id])
}

model ReviewEncryption {
  id            String      @id @default(uuid())
  reviewId      String      @unique
  keyId         String      // Reference to encryption key
  iv            String      // Initialization vector
  authTag       String      // Authentication tag
  salt          String      // Salt for key derivation
  algorithm     String      // Encryption algorithm used
  lastRotation  DateTime    @default(now())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now())
  
  // Relation
  review        Review      @relation(fields: [reviewId], references: [id])
}

model Document {
  id                String              @id @default(uuid())
  name              String
  mimeType          String
  size              Int
  ownerId           String
  currentVersionId  String?            // Reference to current version
  uploadedAt        DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  encryption        DocumentEncryption?
  versions          DocumentVersion[]
  owner             User                @relation("OwnedDocuments", fields: [ownerId], references: [id])
  sharedWith        User[]              @relation("SharedDocuments")
  currentVersion    DocumentVersion?    @relation("CurrentVersion", fields: [currentVersionId], references: [id])
}

model DocumentEncryption {
  id            String    @id @default(uuid())
  documentId    String    @unique
  keyId         String    // Reference to encryption key
  iv            String    // Initialization vector
  authTag       String    // Authentication tag
  salt          String    // Salt for key derivation
  algorithm     String    // Encryption algorithm used
  lastRotation  DateTime  @default(now())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())
  
  document      Document  @relation(fields: [documentId], references: [id])
}

model DocumentVersion {
  id            String    @id @default(uuid())
  documentId    String
  versionNumber Int
  createdAt     DateTime  @default(now())
  createdById   String
  s3Key         String    // Path in S3
  changes       String?   // Description of changes
  size          Int
  checksum      String
  
  document      Document  @relation(fields: [documentId], references: [id])
  creator       User      @relation(fields: [createdById], references: [id])
  currentFor    Document? @relation("CurrentVersion")

  @@unique([documentId, versionNumber])
}

model UserLocation {
  id        String   @id @default(uuid())
  userId    String   @unique
  latitude  Float
  longitude Float
  city      String?
  state     String?
  country   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model EscrowAccount {
  id                String            @id @default(uuid())
  entrepreneurId    String
  funderId          String
  totalAmount       Float
  escrowFee         Float
  status            String            // PENDING, ACTIVE, COMPLETED, DISPUTED
  stripeAccountId   String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  entrepreneur      User              @relation("EntrepreneurEscrows", fields: [entrepreneurId], references: [id])
  funder            User              @relation("FunderEscrows", fields: [funderId], references: [id])
  milestones        Milestone[]
  transactions      EscrowTransaction[]
}

model Milestone {
  id              String    @id @default(uuid())
  escrowAccountId String
  amount          Float
  description     String
  dueDate         DateTime
  status          String    // PENDING, APPROVED, RELEASED, DISPUTED
  proofOfWork     String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now())

  escrowAccount   EscrowAccount @relation(fields: [escrowAccountId], references: [id])
}

model EscrowTransaction {
  id              String    @id @default(uuid())
  escrowAccountId String
  amount          Float
  type            String    // DEPOSIT, RELEASE, REFUND, FEE
  status          String    // PENDING, COMPLETED, FAILED
  stripePaymentId String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now())

  escrowAccount   EscrowAccount @relation(fields: [escrowAccountId], references: [id])
}

// Error Logging Models
enum ErrorSeverity {
  INFO
  WARNING
  ERROR
  CRITICAL
}

model ErrorLog {
  id        String       @id @default(uuid())
  severity  ErrorSeverity
  component String
  message   String
  stack     String?
  metadata  Json?
  userId    String?
  user      User?        @relation(fields: [userId], references: [id])
  createdAt DateTime     @default(now())
  updatedAt DateTime     @default(now())

  @@index([severity])
  @@index([component])
  @@index([createdAt])
  @@index([userId])
}

model ErrorAlert {
  id         String       @id @default(uuid())
  type       String
  severity   ErrorSeverity
  message    String
  metadata   Json?
  resolved   Boolean      @default(false)
  resolvedAt DateTime?
  resolvedBy String?
  user       User?        @relation("ErrorAlertResolver", fields: [resolvedBy], references: [id])
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @default(now())

  @@index([severity])
  @@index([resolved])
  @@index([createdAt])
}

model VerificationRequest {
  id          String    @id @default(uuid())
  userId      String
  type        String    // BusinessPlan, UseCase, DemographicAlignment, etc.
  status      String    // PENDING, APPROVED, REJECTED
  documents   Json[]    // Array of document URLs/metadata
  metadata    Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  reviewedAt  DateTime?
  reviewerId  String?
  reviewNotes String?

  user        User      @relation(fields: [userId], references: [id])
}

model ProfileBoost {
  id          String    @id @default(uuid())
  userId      String
  startDate   DateTime
  endDate     DateTime
  status      String    // ACTIVE, EXPIRED, CANCELLED
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())

  user        User      @relation(fields: [userId], references: [id])
}

model ProfileView {
  id          String    @id @default(uuid())
  viewerId    String
  profileId   String
  createdAt   DateTime  @default(now())
  metadata    Json?

  viewer      User      @relation("Viewers", fields: [viewerId], references: [id])
  profile     User      @relation("ViewedProfiles", fields: [profileId], references: [id])
}

// New models for access control and logging
model AccessLog {
  id          String    @id @default(uuid())
  userId      String
  action      String    // READ, WRITE, UPDATE, DELETE, etc.
  resource    String    // profile, match, message, etc.
  resourceId  String?
  success     Boolean
  reason      String?
  metadata    Json?
  createdAt   DateTime  @default(now())

  user        User      @relation(fields: [userId], references: [id])
}

// New models for advanced matching

model TeamMember {
  id                String   @id @default(uuid())
  name              String
  role              String
  experience        Int      // Years of experience
  skills            Json[]   // Array of skills
  linkedin          String?
  entrepreneurId    String
  entrepreneur      EntrepreneurProfile @relation(fields: [entrepreneurId], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())
}

model InvestmentHistory {
  id              String   @id @default(uuid())
  funderId        String
  funder          FunderProfile @relation(fields: [funderId], references: [id])
  companyName     String
  amount          Float
  stage           String
  date            DateTime
  outcome         String?  // Success, Exit, Ongoing, etc.
  industry        String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())
}

model SuccessMetric {
  id              String   @id @default(uuid())
  type            String   // Revenue, Users, Growth, etc.
  value           Float
  date            DateTime
  entrepreneur    EntrepreneurProfile? @relation(fields: [entrepreneurId], references: [id])
  funder          FunderProfile? @relation(fields: [funderId], references: [id])
  entrepreneurId  String?
  funderId        String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())
}

model IndustryFocus {
  id              String   @id @default(uuid())
  funderId        String
  funder          FunderProfile @relation(fields: [funderId], references: [id])
  industry        String
  expertise       Int      // 1-10 scale
  yearsExperience Int
  successfulDeals Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())
}

model MatchStatus {
  id              String   @id @default(uuid())
  matchId         String
  match           Match    @relation(fields: [matchId], references: [id])
  status          String
  reason          String?
  createdAt       DateTime @default(now())
}

model MatchFeedback {
  id              String   @id @default(uuid())
  matchId         String   @unique
  match           Match    @relation(fields: [matchId], references: [id])
  rating          Int      // 1-5 scale
  feedback        String?
  reasonCodes     String[] // Array of predefined reason codes
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())
}